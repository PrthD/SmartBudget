import React, { useMemo, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import '../styles/Dashboard.css';
import IncomeVsExpensesChart from '../components/charts/IncomeVsExpensesChart';
import MonthlyTrendsChart from '../components/charts/MonthlyTrendsChart';
import SavingsChart from '../components/charts/SavingsChart';

const Dashboard = ({ incomeData, expenseData, onExpenseAdded }) => {
  const [expandedExpense, setExpandedExpense] = useState(null);

  useEffect(() => {
    if (onExpenseAdded) {
      onExpenseAdded();
    }
  }, [onExpenseAdded]);

  const totalIncome = useMemo(
    () => incomeData.reduce((sum, income) => sum + income.amount, 0),
    [incomeData]
  );

  const totalExpenses = useMemo(() => {
    const baseExpenses = expenseData.filter(
      (expense) => !expense.isAutoGenerated
    );
    return baseExpenses.reduce((sum, expense) => sum + expense.amount, 0);
  }, [expenseData]);

  const savings = totalIncome - totalExpenses;

  const monthlyData = useMemo(() => {
    const monthlyTotals = {};
    incomeData.forEach((income) => {
      const month = new Date(income.date).toLocaleString('default', {
        month: 'short',
      });
      monthlyTotals[month] = monthlyTotals[month] || { income: 0, expenses: 0 };
      monthlyTotals[month].income += income.amount;
    });
    expenseData.forEach((expense) => {
      const month = new Date(expense.date).toLocaleString('default', {
        month: 'short',
      });
      monthlyTotals[month] = monthlyTotals[month] || { income: 0, expenses: 0 };
      monthlyTotals[month].expenses += expense.amount;
    });
    return Object.keys(monthlyTotals).map((month) => ({
      month,
      income: monthlyTotals[month].income,
      expenses: monthlyTotals[month].expenses,
    }));
  }, [incomeData, expenseData]);

  const savingsData = useMemo(
    () =>
      monthlyData.map((data) => ({
        month: data.month,
        savings: data.income - data.expenses,
      })),
    [monthlyData]
  );

  const groupedExpenses = useMemo(() => {
    const grouped = {};
    expenseData.forEach((expense) => {
      const key = `${expense.category}-${expense.frequency}`;
      if (!expense.isAutoGenerated) {
        if (!grouped[key]) {
          grouped[key] = { ...expense, futureInstances: [] }; // Original instance
        }
      } else {
        if (grouped[key]) {
          grouped[key].futureInstances.push(expense); // Future instances
        }
      }
    });
    return Object.values(grouped);
  }, [expenseData]);

  const handleViewDetails = (expense) => {
    if (expandedExpense === expense._id) {
      setExpandedExpense(null);
    } else {
      setExpandedExpense(expense._id);
    }
  };

  return (
    <div className="dashboard">
      <h1>SmartBudgetAI Dashboard</h1>

      {/* Display Key Financial Metrics */}
      <div className="metrics">
        <div className="metric-card">
          <h3>Total Income</h3>
          <p>${totalIncome}</p>
        </div>
        <div className="metric-card">
          <h3>Total Expenses</h3>
          <p>${totalExpenses}</p>
        </div>
        <div className="metric-card">
          <h3>Savings</h3>
          <p>${savings}</p>
        </div>
      </div>

      {/* Render Chart Components */}
      <div className="charts">
        <IncomeVsExpensesChart
          totalIncome={totalIncome}
          totalExpenses={totalExpenses}
        />
        <MonthlyTrendsChart monthlyData={monthlyData} />
        <SavingsChart savingsData={savingsData} />
      </div>

      {/* Your Expenses Table */}
      <div className="your-expenses">
        <h2>Your Expenses</h2>
        {groupedExpenses.length > 0 ? (
          <table>
            <thead>
              <tr>
                <th>Category</th>
                <th>Amount</th>
                <th>Frequency</th>
                <th>Date Added</th>
                <th>Description</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {groupedExpenses.map((expense) => (
                <React.Fragment
                  key={`${expense.category}-${expense.frequency}`}
                >
                  <tr>
                    <td>{expense.category}</td>
                    <td>${expense.amount}</td>
                    <td>{expense.frequency}</td>
                    <td>{new Date(expense.date).toLocaleDateString()}</td>
                    <td>{expense.description || 'N/A'}</td>
                    <td>
                      {expense.futureInstances.length > 0 && (
                        <button onClick={() => handleViewDetails(expense)}>
                          {expandedExpense === expense._id
                            ? 'Collapse'
                            : 'Expand'}
                        </button>
                      )}
                    </td>
                  </tr>
                  {expandedExpense === expense._id && (
                    <tr>
                      <td colSpan="6">
                        <ul>
                          {expense.futureInstances.map((instance) => (
                            <li key={instance._id}>
                              {new Date(instance.date).toLocaleDateString()} - $
                              {instance.amount}
                            </li>
                          ))}
                        </ul>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              ))}
            </tbody>
          </table>
        ) : (
          <p>No recurring expenses</p>
        )}
      </div>
    </div>
  );
};

Dashboard.propTypes = {
  incomeData: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      amount: PropTypes.number.isRequired,
      date: PropTypes.string.isRequired,
      source: PropTypes.string.isRequired,
      description: PropTypes.string,
    })
  ).isRequired,
  expenseData: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      amount: PropTypes.number.isRequired,
      date: PropTypes.string.isRequired,
      category: PropTypes.string.isRequired,
      description: PropTypes.string,
      frequency: PropTypes.string,
      isAutoGenerated: PropTypes.bool,
    })
  ).isRequired,
  onExpenseAdded: PropTypes.func,
};

export default Dashboard;
